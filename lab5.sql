-- TABLES
CREATE TABLE uni (
    uni_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    uni_name VARCHAR2(20) NOT NULL,
    creation_date timestamp,
    CONSTRAINT uni_id_pk PRIMARY KEY (uni_id)
);

CREATE TABLE groups (
    gr_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    gr_name VARCHAR2(20) NOT NULL,
    uni_id NUMBER NOT NULL,
    creation_date timestamp,
    CONSTRAINT gr_id_pk PRIMARY KEY (gr_id)
);

CREATE TABLE students (
    st_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    st_name VARCHAR2(20) NOT NULL,
    gr_id NUMBER NOT NULL,
    enter_date timestamp,
    CONSTRAINT st_id_pk PRIMARY KEY (st_id)
);

-- LOGS
CREATE TABLE uni_logs (
    action_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    uni_id NUMBER NOT NULL,
    uni_name VARCHAR2(20) NOT NULL,
    creation_date timestamp,
    change_date timestamp,
    change_type VARCHAR2(6),
    CONSTRAINT uni_logs_id_pk PRIMARY KEY (action_id)
);

CREATE TABLE groups_logs (
    action_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    gr_id NUMBER NOT NULL,
    gr_name VARCHAR2(20) NOT NULL,
    uni_id NUMBER NOT NULL,
    creation_date timestamp,
    change_date timestamp,
    change_type VARCHAR2(6),
    CONSTRAINT gr_logs_id_pk PRIMARY KEY (action_id)
);

CREATE TABLE students_logs (
    action_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    st_id NUMBER NOT NULL,
    st_name VARCHAR2(20) NOT NULL,
    gr_id NUMBER NOT NULL,
    enter_date timestamp,
    change_date timestamp,
    change_type VARCHAR2(6),
    CONSTRAINT stud_logs_id_pk PRIMARY KEY (action_id)
);

CREATE TABLE reports_logs (
    id NUMBER GENERATED ALWAYS AS IDENTITY,
    report_date timestamp,
    CONSTRAINT pk_reports_logs PRIMARY KEY (id)
);

-- TRIGGERS LOGS
CREATE
OR REPLACE TRIGGER tr_uni
AFTER
INSERT
    OR
UPDATE
    OR DELETE ON uni FOR EACH ROW BEGIN IF inserting THEN
INSERT INTO
    uni_logs (
        uni_id,
        uni_name,
        creation_date,
        change_date,
        change_type
    )
VALUES
    (
        :new.uni_id,
        :new.uni_name,
        :new.creation_date,
        systimestamp,
        'INSERT'
    );

ELSIF deleting THEN
INSERT INTO
    uni_logs (
        uni_id,
        uni_name,
        creation_date,
        change_date,
        change_type
    )
VALUES
    (
        :old.uni_id,
        :old.uni_name,
        :old.creation_date,
        systimestamp,
        'DELETE'
    );

ELSIF updating THEN
INSERT INTO
    uni_logs (
        uni_id,
        uni_name,
        creation_date,
        change_date,
        change_type
    )
VALUES
    (
        :new.uni_id,
        :new.uni_name,
        :new.creation_date,
        systimestamp,
        'UPDATE'
    );

END IF;

END;

CREATE
OR REPLACE TRIGGER tr_groups
AFTER
INSERT
    OR
UPDATE
    OR DELETE ON groups FOR EACH ROW BEGIN IF inserting THEN
INSERT INTO
    groups_logs (
        gr_id,
        gr_name,
        uni_id,
        creation_date,
        change_date,
        change_type
    )
VALUES
    (
        :new.gr_id,
        :new.gr_name,
        :new.uni_id,
        :new.creation_date,
        systimestamp,
        'INSERT'
    );

ELSIF deleting THEN
INSERT INTO
    groups_logs (
        gr_id,
        gr_name,
        uni_id,
        creation_date,
        change_date,
        change_type
    )
VALUES
    (
        :old.gr_id,
        :old.gr_name,
        :old.uni_id,
        :old.creation_date,
        systimestamp,
        'DELETE'
    );

ELSIF updating THEN
INSERT INTO
    groups_logs (
        gr_id,
        gr_name,
        uni_id,
        creation_date,
        change_date,
        change_type
    )
VALUES
    (
        :new.gr_id,
        :new.gr_name,
        :new.uni_id,
        :new.creation_date,
        systimestamp,
        'UPDATE'
    );

END IF;

END;

CREATE
OR REPLACE TRIGGER tr_students
AFTER
INSERT
    OR
UPDATE
    OR DELETE ON students FOR EACH ROW BEGIN IF inserting THEN
INSERT INTO
    students_logs (
        st_id,
        st_name,
        gr_id,
        enter_date,
        change_date,
        change_type
    )
VALUES
    (
        :new.st_id,
        :new.st_name,
        :new.gr_id,
        :new.enter_date,
        systimestamp,
        'INSERT'
    );

ELSIF deleting THEN
INSERT INTO
    students_logs (
        st_id,
        st_name,
        gr_id,
        enter_date,
        change_date,
        change_type
    )
VALUES
    (
        :old.st_id,
        :old.st_name,
        :old.gr_id,
        :old.enter_date,
        systimestamp,
        'DELETE'
    );

ELSIF updating THEN
INSERT INTO
    students_logs (
        st_id,
        st_name,
        gr_id,
        enter_date,
        change_date,
        change_type
    )
VALUES
    (
        :new.st_id,
        :new.st_name,
        :new.gr_id,
        :new.enter_date,
        systimestamp,
        'UPDATE'
    );

END IF;

END;

-- TIMESTAMP PACKAGE
CREATE
OR REPLACE PACKAGE cur_state_timestamp_pkg IS cur_state_time timestamp;

PROCEDURE set_time(p_value IN TIMESTAMP);

END cur_state_timestamp_pkg;

CREATE
OR REPLACE PACKAGE BODY cur_state_timestamp_pkg IS PROCEDURE set_time(p_value IN TIMESTAMP) IS BEGIN cur_state_time := p_value;

END set_time;

END cur_state_timestamp_pkg;

-- MAIN PACKAGE
CREATE
OR REPLACE PACKAGE func_package IS PROCEDURE roll_back(date_time TIMESTAMP);

PROCEDURE roll_back(date_time NUMBER);

PROCEDURE report(t_begin IN TIMESTAMP);

PROCEDURE report;

END func_package;

create
OR REPLACE PACKAGE BODY func_package IS PROCEDURE roll_back(date_time TIMESTAMP) IS BEGIN rollback_by_date(date_time);

END roll_back;

PROCEDURE roll_back(date_time NUMBER) IS BEGIN DECLARE current_time timestamp := systimestamp;

BEGIN current_time := current_time - numtodsinterval(date_time / 1000, 'SECOND');

rollback_by_date(current_time);

END;

END roll_back;

PROCEDURE report(t_begin IN TIMESTAMP) IS v_cur timestamp := systimestamp;

BEGIN create_report(t_begin, v_cur);

INSERT INTO
    reports_logs(report_date)
VALUES
    (v_cur);

END report;

PROCEDURE report IS v_begin timestamp := to_timestamp('1/1/1 1:1:1', 'YYYY/MM/DD HH:MI:SS');

v_cur timestamp := systimestamp;

v_count NUMBER;

BEGIN
SELECT
    COUNT(*) INTO v_count
FROM
    reports_logs;

IF (v_count > 0) THEN
SELECT
    report_date INTO v_begin
FROM
    reports_logs
WHERE
    id = (
        SELECT
            MAX(id)
        FROM
            reports_logs
    );

END IF;

create_report(v_begin, v_cur);

INSERT INTO
    reports_logs(report_date)
VALUES
    (v_cur);

END report;

END func_package;